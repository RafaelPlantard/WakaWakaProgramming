﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Refit;
using WakaWakaProgramming.Models;
using WakaWakaProgramming.Models.Users;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace WakaWakaProgramming.Services.Interfaces
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIWakaTimeApiService : IWakaTimeApiService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIWakaTimeApiService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<DurationResponse> GetDurations(string authorization,DateTime date,string project,string branches)
        {
            var arguments = new object[] { authorization,date,project,branches };
            return (Task<DurationResponse>) methodImpls["GetDurations"](Client, arguments);
        }

        public virtual Task<HeartBeatResponse> GetHeartbeats(string authorization,DateTime date)
        {
            var arguments = new object[] { authorization,date };
            return (Task<HeartBeatResponse>) methodImpls["GetHeartbeats"](Client, arguments);
        }

        public virtual Task<HeartBeatPostResponse> PostHeartbeats(string authorization,HeartBeatPostRequest heartbeat)
        {
            var arguments = new object[] { authorization,heartbeat };
            return (Task<HeartBeatPostResponse>) methodImpls["PostHeartbeats"](Client, arguments);
        }

        public virtual Task<LeaderResponse> GetLeaders(string authorization,string language)
        {
            var arguments = new object[] { authorization,language };
            return (Task<LeaderResponse>) methodImpls["GetLeaders"](Client, arguments);
        }

        public virtual Task<StatsResponse> GetStats(string authorization,string range,int timeout,bool iswritesOnly,string project)
        {
            var arguments = new object[] { authorization,range,timeout,iswritesOnly,project };
            return (Task<StatsResponse>) methodImpls["GetStats"](Client, arguments);
        }

        public virtual Task<SummaryResponse> GetSummaries(string authorization,DateTime start,DateTime end,string project,string branches)
        {
            var arguments = new object[] { authorization,start,end,project,branches };
            return (Task<SummaryResponse>) methodImpls["GetSummaries"](Client, arguments);
        }

        public virtual Task<UserResponse> GetUsers(string authorization)
        {
            var arguments = new object[] { authorization };
            return (Task<UserResponse>) methodImpls["GetUsers"](Client, arguments);
        }

    }
}


